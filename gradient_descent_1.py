# -*- coding: utf-8 -*-
"""Gradient_Descent_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tEzU4cZPaYyZziYjBJVl4xFvwhX1eX61

# Gradient Descent Part 1
"""

from sklearn.datasets import make_regression
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# randomly generated Data
X, y = make_regression(n_samples=100, n_features=1, n_informative=1, n_targets=1, noise=20)


lr = LinearRegression()

lr.fit(X, y)
print(lr.coef_)
print(lr.intercept_)

"""Now we will make a class to calculate the intercept and intercept should be closer to the above intercept."""

m = 83.48220151


class GDRegression:
    def __init__(self, learning_rate, epochs):
        self.m = 83.48220151
        self.b = -120
        self.lr = learning_rate
        self.epochs = epochs

    def fit(self, X, y):
        # calculate b using Gradient Descent
        for i in range(self.epochs):
            loss_slope = -2 * np.sum(y - self.m * X.ravel() - self.b)
            self.b = self.b - (self.lr * loss_slope)

        print(self.b)


# Adjust the LR and Epochs
gd = GDRegression(0.006, 50)
gd.fit(X, y)

