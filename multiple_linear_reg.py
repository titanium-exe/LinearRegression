# -*- coding: utf-8 -*-
"""Multiple_Linear_Reg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yut4xIVALeye8Gyph7wOYzXE6eNEU71Q
"""

import numpy as np
from sklearn.datasets import load_diabetes
from sklearn.metrics import r2_score

X,y = load_diabetes(return_X_y=True)

X

X.shape

y.shape

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2,random_state=2)

print(X_train.shape)
print(y_train.shape)

type(y_test)

X_train.size

type(X_train)

print(X_test.shape)

"""# Making Our Own Linear Regression Class"""

class MyLR:
    def __init__(self):
        self.coef_ = None
        self.intercept_ = None

    def fit(self, X_train, y_train):
        # Add a column of ones to X_train for the intercept term
        X_train = np.insert(X_train, 0, 1, axis=1)

        # Calculate beta values using the normal equation
        X_transpose = X_train.T
        X_transpose_dot_X = np.dot(X_transpose, X_train)
        inv_X_transpose_dot_X = np.linalg.inv(X_transpose_dot_X)
        X_transpose_dot_y = np.dot(X_transpose, y_train)
        beta_values = np.dot(inv_X_transpose_dot_X, X_transpose_dot_y)

        # Set intercept and coefficients
        self.intercept_ = beta_values[0]
        self.coef_ = beta_values[1:]

    def predict(self, X_test):
        # Add a column of ones to X_test for the intercept term
        X_test = np.insert(X_test, 0, 1, axis=1)
        y_pred = np.dot(X_test, np.concatenate(([self.intercept_], self.coef_)))
        return y_pred

lr = MyLR()



lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

print(y_pred)

r2_score(y_test,y_pred)

